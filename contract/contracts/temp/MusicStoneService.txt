
pragma solidity ^0.5.6;

import "hardhat/console.sol";
import "../contracts/ownership/Ownable.sol";
import "../contracts/token/KIP7/IKIP7.sol";
import "../contracts/token/KIP37/IKIP37.sol";

contract MusicStoneService is Ownable{
    uint256 tokenRatio = 500;       // 1klay => 1000 mstoken
    IKIP7 public mstoken;
    IKIP37 public mssft;

    mapping(uint256 => mapping(address => uint256)) private _sft_balances;
    mapping(uint256 => uint256) private _sft_totalSupply;
    mapping(address => uint256[]) _sft_artist_balances;

    constructor () public {
    }
    
    function setToken(address _token) public onlyOwner {
        mstoken = IKIP7(_token);
    }

    function setSFT(address _token) public onlyOwner {
        mssft = IKIP37(_token);
    }

    function buyToken() public payable {
        uint256 _amount = msg.value * tokenRatio;
        uint256 allowance = mstoken.allowance(owner(), address(this));
        require(msg.value > 0, "You must pay at least 1 ETH per cupcake");
        require(allowance >= _amount, "Not enough mstoken in stock to complete this purchase");
        _safeTransferFrom(owner(), msg.sender, _amount);
    }

    function sellToken(uint _amount) public payable {
        uint256 _klay_amount = _amount / tokenRatio;
        require(mstoken.allowance(msg.sender, address(this)) >= _amount, "mstoken allowance too low");
        require(address(this).balance >= _klay_amount, "Klay too low");
        _safeTransferFrom(msg.sender, owner(), _amount);
        require(msg.sender.send(_klay_amount));
    }

    function setTokenRatio(uint256 _newTokenRatio) public onlyOwner {
        tokenRatio = _newTokenRatio;
    }

    function getTokenRatio() public view returns(uint256) {
        return tokenRatio;
    }

    function withdraw() public payable onlyOwner {
        require(msg.sender.send(address(this).balance));
    }

    function mintSFTToken() public {
        mssft.mintMusicStone(1234);
    }

    function _safeTransferFrom(
        address sender,
        address recipient,
        uint amount
    ) private {
        bool sent = mstoken.transferFrom(sender, recipient, amount);
        require(sent, "mstoken transfer failed");
    }
}